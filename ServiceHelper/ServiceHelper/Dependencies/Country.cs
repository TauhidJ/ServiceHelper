namespace ServiceHelper.Dependencies
{
    public class Country
    {
        private static readonly IEnumerable<Country> _list = new Country[249]
    {
        new Country("Afghanistan", "AF", "AFG", 4, new string[1] { "+93" }),
        new Country("Åland Islands", "AX", "ALA", 248, new string[1] { "+358" }),
        new Country("Albania", "AL", "ALB", 8, new string[1] { "+355" }),
        new Country("Algeria", "DZ", "DZA", 12, new string[1] { "+213" }),
        new Country("American Samoa", "AS", "ASM", 16, new string[1] { "+1684" }),
        new Country("Andorra", "AD", "AND", 20, new string[1] { "+376" }),
        new Country("Angola", "AO", "AGO", 24, new string[1] { "+244" }),
        new Country("Anguilla", "AI", "AIA", 660, new string[1] { "+1264" }),
        new Country("Antarctica", "AQ", "ATA", 10, new string[1] { "+672" }),
        new Country("Antigua and Barbuda", "AG", "ATG", 28, new string[1] { "+1268" }),
        new Country("Argentina", "AR", "ARG", 32, new string[1] { "+54" }),
        new Country("Armenia", "AM", "ARM", 51, new string[1] { "+374" }),
        new Country("Aruba", "AW", "ABW", 533, new string[1] { "+297" }),
        new Country("Australia", "AU", "AUS", 36, new string[1] { "+61" }),
        new Country("Austria", "AT", "AUT", 40, new string[1] { "+43" }),
        new Country("Azerbaijan", "AZ", "AZE", 31, new string[1] { "+994" }),
        new Country("Bahamas", "BS", "BHS", 44, new string[1] { "+1242" }),
        new Country("Bahrain", "BH", "BHR", 48, new string[1] { "+973" }),
        new Country("Bangladesh", "BD", "BGD", 50, new string[1] { "+880" }),
        new Country("Barbados", "BB", "BRB", 52, new string[1] { "+1246" }),
        new Country("Belarus", "BY", "BLR", 112, new string[1] { "+375" }),
        new Country("Belgium", "BE", "BEL", 56, new string[1] { "+32" }),
        new Country("Belize", "BZ", "BLZ", 84, new string[1] { "+501" }),
        new Country("Benin", "BJ", "BEN", 204, new string[1] { "+229" }),
        new Country("Bermuda", "BM", "BMU", 60, new string[1] { "+1441" }),
        new Country("Bhutan", "BT", "BTN", 64, new string[1] { "+975" }),
        new Country("Bolivia (Plurinational State of)", "BO", "BOL", 68, new string[1] { "+591" }),
        new Country("Bonaire, Sint Eustatius and Saba", "BQ", "BES", 535, new string[1] { "+599" }),
        new Country("Bosnia and Herzegovina", "BA", "BIH", 70, new string[1] { "+387" }),
        new Country("Botswana", "BW", "BWA", 72, new string[1] { "+267" }),
        new Country("Bouvet Island", "BV", "BVT", 74),
        new Country("Brazil", "BR", "BRA", 76, new string[1] { "+55" }),
        new Country("British Indian Ocean Territory", "IO", "IOT", 86, new string[1] { "+246" }),
        new Country("Brunei Darussalam", "BN", "BRN", 96, new string[1] { "+673" }),
        new Country("Bulgaria", "BG", "BGR", 100, new string[1] { "+359" }),
        new Country("Burkina Faso", "BF", "BFA", 854, new string[1] { "+226" }),
        new Country("Burundi", "BI", "BDI", 108, new string[1] { "+257" }),
        new Country("Cabo Verde", "CV", "CPV", 132, new string[1] { "+238" }),
        new Country("Cambodia", "KH", "KHM", 116, new string[1] { "+855" }),
        new Country("Cameroon", "CM", "CMR", 120, new string[1] { "+237" }),
        new Country("Canada", "CA", "CAN", 124, new string[1] { "+1" }),
        new Country("Cayman Islands", "KY", "CYM", 136, new string[1] { "+1345" }),
        new Country("Central African Republic", "CF", "CAF", 140, new string[1] { "+236" }),
        new Country("Chad", "TD", "TCD", 148, new string[1] { "+235" }),
        new Country("Chile", "CL", "CHL", 152, new string[1] { "+56" }),
        new Country("China", "CN", "CHN", 156, new string[1] { "+86" }),
        new Country("Christmas Island", "CX", "CXR", 162, new string[1] { "+61" }),
        new Country("Cocos (Keeling) Islands", "CC", "CCK", 166, new string[1] { "+61" }),
        new Country("Colombia", "CO", "COL", 170, new string[1] { "+57" }),
        new Country("Comoros", "KM", "COM", 174, new string[1] { "+269" }),
        new Country("Congo", "CG", "COG", 178, new string[1] { "+242" }),
        new Country("Congo (Democratic Republic of the)", "CD", "COD", 180, new string[1] { "+243" }),
        new Country("Cook Islands", "CK", "COK", 184, new string[1] { "+682" }),
        new Country("Costa Rica", "CR", "CRI", 188, new string[1] { "+506" }),
        new Country("Côte d'Ivoire", "CI", "CIV", 384, new string[1] { "+225" }),
        new Country("Croatia", "HR", "HRV", 191, new string[1] { "+385" }),
        new Country("Cuba", "CU", "CUB", 192, new string[1] { "+53" }),
        new Country("Curaçao", "CW", "CUW", 531, new string[1] { "+599" }),
        new Country("Cyprus", "CY", "CYP", 196, new string[1] { "+357" }),
        new Country("Czech Republic", "CZ", "CZE", 203, new string[1] { "+420" }),
        new Country("Denmark", "DK", "DNK", 208, new string[1] { "+45" }),
        new Country("Djibouti", "DJ", "DJI", 262, new string[1] { "+253" }),
        new Country("Dominica", "DM", "DMA", 212, new string[1] { "+1767" }),
        new Country("Dominican Republic", "DO", "DOM", 214, new string[3] { "+1809", "+1829", "+1849" }),
        new Country("Ecuador", "EC", "ECU", 218, new string[1] { "+593" }),
        new Country("Egypt", "EG", "EGY", 818, new string[1] { "+20" }),
        new Country("El Salvador", "SV", "SLV", 222, new string[1] { "+503" }),
        new Country("Equatorial Guinea", "GQ", "GNQ", 226, new string[1] { "+240" }),
        new Country("Eritrea", "ER", "ERI", 232, new string[1] { "+291" }),
        new Country("Estonia", "EE", "EST", 233, new string[1] { "+372" }),
        new Country("Ethiopia", "ET", "ETH", 231, new string[1] { "+251" }),
        new Country("Falkland Islands (Malvinas)", "FK", "FLK", 238, new string[1] { "+500" }),
        new Country("Faroe Islands", "FO", "FRO", 234, new string[1] { "+298" }),
        new Country("Fiji", "FJ", "FJI", 242, new string[1] { "+679" }),
        new Country("Finland", "FI", "FIN", 246, new string[1] { "+358" }),
        new Country("France", "FR", "FRA", 250, new string[1] { "+33" }),
        new Country("French Guiana", "GF", "GUF", 254, new string[1] { "+594" }),
        new Country("French Polynesia", "PF", "PYF", 258, new string[1] { "+689" }),
        new Country("French Southern Territories", "TF", "ATF", 260, new string[1] { "+262" }),
        new Country("Gabon", "GA", "GAB", 266, new string[1] { "+241" }),
        new Country("Gambia", "GM", "GMB", 270, new string[1] { "+220" }),
        new Country("Georgia", "GE", "GEO", 268, new string[1] { "+995" }),
        new Country("Germany", "DE", "DEU", 276, new string[1] { "+49" }),
        new Country("Ghana", "GH", "GHA", 288, new string[1] { "+233" }),
        new Country("Gibraltar", "GI", "GIB", 292, new string[1] { "+350" }),
        new Country("Greece", "GR", "GRC", 300, new string[1] { "+30" }),
        new Country("Greenland", "GL", "GRL", 304, new string[1] { "+299" }),
        new Country("Grenada", "GD", "GRD", 308, new string[1] { "+1473" }),
        new Country("Guadeloupe", "GP", "GLP", 312, new string[1] { "+590" }),
        new Country("Guam", "GU", "GUM", 316, new string[1] { "+1671" }),
        new Country("Guatemala", "GT", "GTM", 320, new string[1] { "+502" }),
        new Country("Guernsey", "GG", "GGY", 831, new string[1] { "+441481" }),
        new Country("Guinea", "GN", "GIN", 324, new string[1] { "+224" }),
        new Country("Guinea-Bissau", "GW", "GNB", 624, new string[1] { "+245" }),
        new Country("Guyana", "GY", "GUY", 328, new string[1] { "+592" }),
        new Country("Haiti", "HT", "HTI", 332, new string[1] { "+509" }),
        new Country("Heard Island and McDonald Islands", "HM", "HMD", 334),
        new Country("Holy See", "VA", "VAT", 336, new string[1] { "+379" }),
        new Country("Honduras", "HN", "HND", 340, new string[1] { "+504" }),
        new Country("Hong Kong", "HK", "HKG", 344, new string[1] { "+852" }),
        new Country("Hungary", "HU", "HUN", 348, new string[1] { "+36" }),
        new Country("Iceland", "IS", "ISL", 352, new string[1] { "+354" }),
        new Country("India", "IN", "IND", 356, new string[1] { "+91" }),
        new Country("Indonesia", "ID", "IDN", 360, new string[1] { "+62" }),
        new Country("Iran (Islamic Republic of)", "IR", "IRN", 364, new string[1] { "+98" }),
        new Country("Iraq", "IQ", "IRQ", 368, new string[1] { "+964" }),
        new Country("Ireland", "IE", "IRL", 372, new string[1] { "+353" }),
        new Country("Isle of Man", "IM", "IMN", 833, new string[1] { "+441624" }),
        new Country("Israel", "IL", "ISR", 376, new string[1] { "+972" }),
        new Country("Italy", "IT", "ITA", 380, new string[1] { "+39" }),
        new Country("Jamaica", "JM", "JAM", 388, new string[1] { "+1876" }),
        new Country("Japan", "JP", "JPN", 392, new string[1] { "+81" }),
        new Country("Jersey", "JE", "JEY", 832, new string[1] { "+441534" }),
        new Country("Jordan", "JO", "JOR", 400, new string[1] { "+962" }),
        new Country("Kazakhstan", "KZ", "KAZ", 398, new string[1] { "+7" }),
        new Country("Kenya", "KE", "KEN", 404, new string[1] { "+254" }),
        new Country("Kiribati", "KI", "KIR", 296, new string[1] { "+686" }),
        new Country("Korea (Democratic People's Republic of)", "KP", "PRK", 408, new string[1] { "+850" }),
        new Country("Korea (Republic of)", "KR", "KOR", 410, new string[1] { "+82" }),
        new Country("Kuwait", "KW", "KWT", 414, new string[1] { "+965" }),
        new Country("Kyrgyzstan", "KG", "KGZ", 417, new string[1] { "+996" }),
        new Country("Lao People's Democratic Republic", "LA", "LAO", 418, new string[1] { "+856" }),
        new Country("Latvia", "LV", "LVA", 428, new string[1] { "+371" }),
        new Country("Lebanon", "LB", "LBN", 422, new string[1] { "+961" }),
        new Country("Lesotho", "LS", "LSO", 426, new string[1] { "+266" }),
        new Country("Liberia", "LR", "LBR", 430, new string[1] { "+231" }),
        new Country("Libya", "LY", "LBY", 434, new string[1] { "+218" }),
        new Country("Liechtenstein", "LI", "LIE", 438, new string[1] { "+423" }),
        new Country("Lithuania", "LT", "LTU", 440, new string[1] { "+370" }),
        new Country("Luxembourg", "LU", "LUX", 442, new string[1] { "+352" }),
        new Country("Macao", "MO", "MAC", 446, new string[1] { "+853" }),
        new Country("Macedonia (the former Yugoslav Republic of)", "MK", "MKD", 807, new string[1] { "+389" }),
        new Country("Madagascar", "MG", "MDG", 450, new string[1] { "+261" }),
        new Country("Malawi", "MW", "MWI", 454, new string[1] { "+265" }),
        new Country("Malaysia", "MY", "MYS", 458, new string[1] { "+60" }),
        new Country("Maldives", "MV", "MDV", 462, new string[1] { "+960" }),
        new Country("Mali", "ML", "MLI", 466, new string[1] { "+223" }),
        new Country("Malta", "MT", "MLT", 470, new string[1] { "+356" }),
        new Country("Marshall Islands", "MH", "MHL", 584, new string[1] { "+692" }),
        new Country("Martinique", "MQ", "MTQ", 474, new string[1] { "+596" }),
        new Country("Mauritania", "MR", "MRT", 478, new string[1] { "+222" }),
        new Country("Mauritius", "MU", "MUS", 480, new string[1] { "+230" }),
        new Country("Mayotte", "YT", "MYT", 175, new string[1] { "+262" }),
        new Country("Mexico", "MX", "MEX", 484, new string[1] { "+52" }),
        new Country("Micronesia (Federated States of)", "FM", "FSM", 583, new string[1] { "+691" }),
        new Country("Moldova (Republic of)", "MD", "MDA", 498, new string[1] { "+373" }),
        new Country("Monaco", "MC", "MCO", 492, new string[1] { "+377" }),
        new Country("Mongolia", "MN", "MNG", 496, new string[1] { "+976" }),
        new Country("Montenegro", "ME", "MNE", 499, new string[1] { "+382" }),
        new Country("Montserrat", "MS", "MSR", 500, new string[1] { "+1664" }),
        new Country("Morocco", "MA", "MAR", 504, new string[1] { "+212" }),
        new Country("Mozambique", "MZ", "MOZ", 508, new string[1] { "+258" }),
        new Country("Myanmar", "MM", "MMR", 104, new string[1] { "+95" }),
        new Country("Namibia", "NA", "NAM", 516, new string[1] { "+264" }),
        new Country("Nauru", "NR", "NRU", 520, new string[1] { "+674" }),
        new Country("Nepal", "NP", "NPL", 524, new string[1] { "+977" }),
        new Country("Netherlands", "NL", "NLD", 528, new string[1] { "+31" }),
        new Country("New Caledonia", "NC", "NCL", 540, new string[1] { "+687" }),
        new Country("New Zealand", "NZ", "NZL", 554, new string[1] { "+64" }),
        new Country("Nicaragua", "NI", "NIC", 558, new string[1] { "+505" }),
        new Country("Niger", "NE", "NER", 562, new string[1] { "+227" }),
        new Country("Nigeria", "NG", "NGA", 566, new string[1] { "+234" }),
        new Country("Niue", "NU", "NIU", 570, new string[1] { "+683" }),
        new Country("Norfolk Island", "NF", "NFK", 574, new string[1] { "+672" }),
        new Country("Northern Mariana Islands", "MP", "MNP", 580, new string[1] { "+1670" }),
        new Country("Norway", "NO", "NOR", 578, new string[1] { "+47" }),
        new Country("Oman", "OM", "OMN", 512, new string[1] { "+968" }),
        new Country("Pakistan", "PK", "PAK", 586, new string[1] { "+92" }),
        new Country("Palau", "PW", "PLW", 585, new string[1] { "+680" }),
        new Country("Palestine, State of", "PS", "PSE", 275, new string[1] { "+970" }),
        new Country("Panama", "PA", "PAN", 591, new string[1] { "+507" }),
        new Country("Papua New Guinea", "PG", "PNG", 598, new string[1] { "+675" }),
        new Country("Paraguay", "PY", "PRY", 600, new string[1] { "+595" }),
        new Country("Peru", "PE", "PER", 604, new string[1] { "+51" }),
        new Country("Philippines", "PH", "PHL", 608, new string[1] { "+63" }),
        new Country("Pitcairn", "PN", "PCN", 612, new string[1] { "+64" }),
        new Country("Poland", "PL", "POL", 616, new string[1] { "+48" }),
        new Country("Portugal", "PT", "PRT", 620, new string[1] { "+351" }),
        new Country("Puerto Rico", "PR", "PRI", 630, new string[2] { "+1787", "+1939" }),
        new Country("Qatar", "QA", "QAT", 634, new string[1] { "+974" }),
        new Country("Réunion", "RE", "REU", 638, new string[1] { "+262" }),
        new Country("Romania", "RO", "ROU", 642, new string[1] { "+40" }),
        new Country("Russian Federation", "RU", "RUS", 643, new string[1] { "+7" }),
        new Country("Rwanda", "RW", "RWA", 646, new string[1] { "+250" }),
        new Country("Saint Barthélemy", "BL", "BLM", 652, new string[1] { "+590" }),
        new Country("Saint Helena, Ascension and Tristan da Cunha", "SH", "SHN", 654, new string[1] { "+290" }),
        new Country("Saint Kitts and Nevis", "KN", "KNA", 659, new string[1] { "+1869" }),
        new Country("Saint Lucia", "LC", "LCA", 662, new string[1] { "+1758" }),
        new Country("Saint Martin (French part)", "MF", "MAF", 663, new string[1] { "+590" }),
        new Country("Saint Pierre and Miquelon", "PM", "SPM", 666, new string[1] { "+508" }),
        new Country("Saint Vincent and the Grenadines", "VC", "VCT", 670, new string[1] { "+1784" }),
        new Country("Samoa", "WS", "WSM", 882, new string[1] { "+685" }),
        new Country("San Marino", "SP", "SMR", 674),
        new Country("Sao Tome and Principe", "ST", "STP", 678, new string[1] { "+239" }),
        new Country("Saudi Arabia", "SA", "SAU", 682, new string[1] { "+966" }),
        new Country("Senegal", "SN", "SEN", 686, new string[1] { "+221" }),
        new Country("Serbia", "RS", "SRB", 688, new string[1] { "+381" }),
        new Country("Seychelles", "SC", "SYC", 690, new string[1] { "+248" }),
        new Country("Sierra Leone", "SL", "SLE", 694, new string[1] { "+232" }),
        new Country("Singapore", "SG", "SGP", 702, new string[1] { "+65" }),
        new Country("Sint Maarten (Dutch part)", "SX", "SXM", 534, new string[1] { "+1721" }),
        new Country("Slovakia", "SK", "SVK", 703, new string[1] { "+421" }),
        new Country("Slovenia", "SI", "SVN", 705, new string[1] { "+386" }),
        new Country("Solomon Islands", "SB", "SLB", 90, new string[1] { "+677" }),
        new Country("Somalia", "SO", "SOM", 706, new string[1] { "+252" }),
        new Country("South Africa", "ZA", "ZAF", 710, new string[1] { "+27" }),
        new Country("South Georgia and the South Sandwich Islands", "GS", "SGS", 239, new string[1] { "+500" }),
        new Country("South Sudan", "SS", "SSD", 728, new string[1] { "+211" }),
        new Country("Spain", "ES", "ESP", 724, new string[1] { "+34" }),
        new Country("Sri Lanka", "LK", "LKA", 144, new string[1] { "+94" }),
        new Country("Sudan", "SD", "SDN", 729, new string[1] { "+249" }),
        new Country("Suriname", "SR", "SUR", 740, new string[1] { "+597" }),
        new Country("Svalbard and Jan Mayen", "SJ", "SJM", 744, new string[1] { "+47" }),
        new Country("Swaziland", "SZ", "SWZ", 748, new string[1] { "+268" }),
        new Country("Sweden", "SE", "SWE", 752, new string[1] { "+46" }),
        new Country("Switzerland", "CH", "CHE", 756, new string[1] { "+41" }),
        new Country("Syrian Arab Republic", "SY", "SYR", 760, new string[1] { "+963" }),
        new Country("Taiwan, Province of China[a]", "TW", "TWN", 158, new string[1] { "+886" }),
        new Country("Tajikistan", "TJ", "TJK", 762, new string[1] { "+992" }),
        new Country("Tanzania, United Republic of", "TZ", "TZA", 834, new string[1] { "+255" }),
        new Country("Thailand", "TH", "THA", 764, new string[1] { "+66" }),
        new Country("Timor-Leste", "TL", "TLS", 626, new string[1] { "+670" }),
        new Country("Togo", "TG", "TGO", 768, new string[1] { "+228" }),
        new Country("Tokelau", "TK", "TKL", 772, new string[1] { "+690" }),
        new Country("Tonga", "TO", "TON", 776, new string[1] { "+676" }),
        new Country("Trinidad and Tobago", "TT", "TTO", 780, new string[1] { "+1868" }),
        new Country("Tunisia", "TN", "TUN", 788, new string[1] { "+216" }),
        new Country("Turkey", "TR", "TUR", 792, new string[1] { "+90" }),
        new Country("Turkmenistan", "TM", "TKM", 795, new string[1] { "+993" }),
        new Country("Turks and Caicos Islands", "TC", "TCA", 796, new string[1] { "+1649" }),
        new Country("Tuvalu", "TV", "TUV", 798, new string[1] { "+688" }),
        new Country("Uganda", "UG", "UGA", 800, new string[1] { "+256" }),
        new Country("Ukraine", "UA", "UKR", 804, new string[1] { "+380" }),
        new Country("United Arab Emirates", "AE", "ARE", 784, new string[1] { "+971" }),
        new Country("United Kingdom of Great Britain and Northern Ireland", "GB", "GBR", 826, new string[1] { "+44" }),
        new Country("United States of America", "US", "USA", 840, new string[1] { "+1" }),
        new Country("United States Minor Outlying Islands", "UM", "UMI", 581),
        new Country("Uruguay", "UY", "URY", 858, new string[1] { "+598" }),
        new Country("Uzbekistan", "UZ", "UZB", 860, new string[1] { "+998" }),
        new Country("Vanuatu", "VU", "VUT", 548, new string[1] { "+678" }),
        new Country("Venezuela (Bolivarian Republic of)", "VE", "VEN", 862, new string[1] { "+58" }),
        new Country("Viet Nam", "VN", "VNM", 704, new string[1] { "+84" }),
        new Country("Virgin Islands (British)", "VG", "VGB", 92, new string[1] { "+1284" }),
        new Country("Virgin Islands (U.S.)", "VI", "VIR", 850, new string[1] { "+1340" }),
        new Country("Wallis and Futuna", "WF", "WLF", 876, new string[1] { "+681" }),
        new Country("Western Sahara", "EH", "ESH", 732, new string[1] { "+212" }),
        new Country("Yemen", "YE", "YEM", 887, new string[1] { "+967" }),
        new Country("Zambia", "ZM", "ZMB", 894, new string[1] { "+260" }),
        new Country("Zimbabwe", "ZW", "ZWE", 716, new string[1] { "+263" })
    };

        public static readonly IReadOnlyList<Country> List = _list.ToList().AsReadOnly();

        public string Name { get; private set; }

        public string ISO3166Alpha2 { get; private set; }

        public string ISO3166Alpha3 { get; private set; }

        public int ISO3166NumericCode { get; private set; }

        public string[] CallingCodes { get; private set; }

        public Country this[string code] => code.Length switch
        {
            2 => FromISO3166Alpha2(code),
            3 => FromISO3166Alpha3(code),
            _ => throw new IndexOutOfRangeException(),
        };

        public Country(string name, string alpha2, string alpha3, int numericCode, string[]? callingCodes = null)
        {
            Name = name;
            ISO3166Alpha2 = alpha2;
            ISO3166Alpha3 = alpha3;
            ISO3166NumericCode = numericCode;
            CallingCodes = callingCodes ?? new string[0];
        }

        public static Country FromISO3166Alpha3(string alpha3)
        {
            string alpha4 = alpha3;
            return _list.FirstOrDefault((p) => p.ISO3166Alpha3 == alpha4);
        }

        public static Country FromISO3166Alpha2(string alpha2)
        {
            string alpha3 = alpha2;
            return _list.FirstOrDefault((p) => p.ISO3166Alpha2 == alpha3);
        }
    }
}
